%{
extern "C"
{
	int yylex(void);
	int yyparse(void);
}

#include "symtab_class_header.h"
#include <ctype.h>
#include <stack> 
#include <sstream> // for ostringstream
#include <string>
char *start_expression_string(Symbol *symbol);
void generate_exp(Symbol *symbol,const char *rhs);
int yyerror(const char *s);
void generate_copy(Symbol* symbol,int value);
char *new_registrator();
char* function_call(Symbol *func, Symbol *para);
char *Calc_exponential(const char *r1,const char *r2);
int assign_next_lable();
char *get_number(int num);
bool is_number(const char *string);
char* cal_operation(char oprator,const char *left, const char *right,const char *target);
extern int assign_next_register();
char *revise(char* str);
void push_array_target_location(char *location );
void assign_array_info(char *type, Symbol *id,int size);
void assign_variable_type(char *type,Symbol *id);
char* call_function(Symbol *func,char *para_list);
void pop_array_target_location();
char* string_connect(char *a, char *b);
void empty_string_buffer();
char* copy_buffer();
int ReplaceStr(char *sSrc, const char *sMatchStr, const char *sReplaceStr);
char *string_copy(char *str);
//global variables
stack<char *> array_target_location;
stack<int> if_stack;
stack<int> do_stack;
stack<char *> tmp_stack;
stack<char *> do_tmp_stack;
stack<char *> explist_tmp_stack;
stack<char *> if_tmp_stack;
char if_buffer[10000];

char string_buffer[10000];
int Label;
char empty_label[]="";
%}

%union 
{
        int intstuff;
        char *stringstuff;
        Symbol* symbolstuff;  
}


%token MAIN
%token BEGIN_E
%token END_E
%token EXPO
%token <stringstuff> INT
%token <stringstuff> CHAR
%token <stringstuff> LONG
%token ENUM
%token VOID
%token DO
%token IF
%token ELSE
%token CONTINUE
%token <stringstuff> BOOL


%token <stringstuff> AND
%token <stringstuff> OR
%token <stringstuff> LT
%token <stringstuff> GT
%token <stringstuff> EQ
%token <stringstuff> NEQ
%token <stringstuff> LE
%token <stringstuff> GE
%token <stringstuff> LEFT_SHIFT
%token <stringstuff> RIGHT_SHIFT
%token <intstuff> INTLITERAL
%token <symbolstuff> ID
%token <stringstuff> STRING_LITERAL

%type <stringstuff> factor 
%type <stringstuff> term
%type <stringstuff> Expression 
%type <stringstuff> statement
%type <stringstuff> parentheses
%type <stringstuff> declaration
%type <stringstuff> declaration_item
%type <intstuff> arraycontent
%type <stringstuff> if_content
%type <stringstuff> comparison
%type <stringstuff> do_loop_statement
%type <stringstuff> do_begin
%type <stringstuff> do_end
%type <stringstuff> if_statement
%type <stringstuff> Program
%type <stringstuff> FuncList
%type <stringstuff> Function
%type <stringstuff> sBlock
%type <stringstuff> Parameter_list
%type <symbolstuff> call_id
%type <stringstuff> Expression_list
%type <stringstuff> ShiftTerm
%type <stringstuff> BitTerm
%type <stringstuff> Shift_operation
%type <stringstuff> bit_operation
%type <stringstuff> Program_Initialization
%type <stringstuff> type
%type <stringstuff> statement_list
%type <stringstuff> do_list
