   This is a very simple "compiler" that will serve both as an example of 
flex and bison files and as an "assembler" in 4650/5650 this term and beyond.
   

   As an assembler, it will "accept" the CMachine assembly language, which 
will be defined in some detail below.

---------------------  The CMachine  ------------------------------------
The CMachine assembly language is a small subset of the C language designed
to provide operations much like a "typical" assembly language.  However,
since we want the assembly language to actually be "compilable" by gcc,
it must be a subset of C.  So the "look" of the CMachine assembly language
is different from typical assembly language.

The BEST way to determine what the CMachine accepts is a combination of 
two techniques, namely

      1) Read the gram.prod file in this directory which will give you
         the Context-Free grammar for the CMachine (assembly) language.


      2) Write some CMachine assembly code and use my "assembler" to see
         if its accurate.


Of course you could also look at some CMachine assembly code.  The examples
AssemblyCode/one.c, AssemblyCode/two.c and AssemblyCode/three.c are three 
such programs.  I expect that you'll generate LOTS more during this term 
and would enjoy having copies of those "working" CMachine programs at the 
end of the term.

So, now for a few "general" statements about the CMachine assembly language.

        . The CMachine (currently) 8 integer registers, names r0 through r7
          (notice that they are declared as integers at the top of a 
          CMachine assembly language file.)

        . The CMachine assumes that local variables will be maintained on
          a run-time stack, and it provides two "special registers" called
          the stack pointer (sp) and the frame pointer (fp). There will
          be discussion in class about how to set up your activation
          records using a stack pointer and frame pointer.

        . The CMachine supports a limited variety of assembly language
          statement formats, more specifically a CMachine statement must
          be one of the following:

                . a three-address assignment;  three-address means that in
                  addition to the '=' there is AT MOST one other (binary)
                  operator included in the statement.  (Ok, that's a 
                  grotesque simplification, but the textbook defines 3-address
                  statements much more formally, and I'd guess that 
                  Dr. Bryant will as well.)  A three-address assignment
                  statement must use ONLY registers for the operands.  In
                  other words, the CMachine is a load-store architecture.

		. a load from memory (either a global variable or a value stored
                  on the stack) to a register

              	. a store from a register to memory

                . an assignment of an integer literal to a register

                . a push (of an argument) onto the stack as part of setting up
                  a function call

             	. a function call (with or without parameters)

		. a label

		. a goto

		. a return

		. an if statement 
	
		. and finally, because I'm told that you'll need to dynamically
                  allocate memory the follow type of statement is allowed

                  iptr = malloc(r?)  where r? contains the number of bytes
                         of dynamic memory you want.  (Actually the syntax
                         allows you to call any function, not just malloc,
                         but my assumption is that you'll use this type of
                         statement only for malloc.)

        . The CMachine supports an even more limited variety of operands.

		. a register, r0 .. r7

                . an integer literal

                . a string literal

                . a dereference off the frame pointer to access a value on
                  the runtime stack.

                . a dereference of a declared pointer variable. There are only
                  two types of such variables, namely

                        int *iptrX         
                    and
                        char *cptrX

                   where X is some literal integer value

        NOTE:  Each CMachine program MUST declare (in order)

                  . some register variables r1, r2, ...

                  . some number of iptr variables, iptr1, iptr2, ...

                  . some number of cptr variable, cptr1, cptr2, ...

                  . a single frame pointer (fp) and a single stack pointer (sp),
                    both char *.
                    



	. The CMachine also includes an "extensive" library of functions which
          can be found in the file, "accessories.c".  At this point in time
          accessories.c IS the documentation of this library.


-----------------------------------------------------------------------------

Your compilers this term will generate CMachine assembly language programs.
To "assemble" and the "run" your program you could execute the following
steps once you've built the assembler by typing "make" in this directory.

   1) Have your compiler build a CMachine assembly language file, which
      for illustration I'll assume is named fileCM.c  (for CMachine assembly,
      of course).

   2) Check to see that your generated code actually IS a CMachine assembly
      language program, with the command
 
         ./assembler < fileCM.c

   If you don't get any syntax errors, then the output "assembly" language
is a "correct" CMachine program.   Now to get the output of your compiler:

    gcc fileCM.c AssemblyCode/accessories.c

and run the resulting executable.

As an added feature, I've allowed /* ... */ comments in your CMachine code.
It is sometimes useful to include comments in your assembly language to help
you debug.  Alas, the comments WILL be printed to stdout when you run the
assembler.  Hopefully this won't be an inconvenience.
