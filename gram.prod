%start Program_Initialization 

%%
Program_Initialization : Program
		{
			cout<<"int r0, r1, r2, r3, r4, r5, r6, r7;\nint *iptr1;\nchar *cptr1;\nchar *fp, *sp;\nchar int_variable[1024];\nchar char_variable[1024];\n";
			cout<< $1;
		}
		;

Program : declaration FuncList
		{
			strcat($1,$2);
			$$ = $1;
		}
		| FuncList
		{
			$$ = $1;
		}
		;

FuncList : Function FuncList
		{
			strcat($1,$2);
			$$ = $1;
		}
		| Function 
		{
			$$ = $1;
		}
		;


Function :  MAIN  '(' ')' ':' VOID sBlock
			{
				char *return_string = "main()\n";
				$$ =  return_string;
			}
			| ID '(' Parameter_list ')'
			{
				
			}
			| ID '(' ')'
			{

			}

			| ID '(' Parameter_list ')' ':' type declaration sBlock
			{


			}
			;

Parameter_list : call_id ',' Parameter_list
			{

			}
			| call_id
			{

			}
			;

//************************ Variable Declaration **************************//

declaration : declaration_item ';' declaration
			{
				//printf("\nSeen sequent declaration;\n\n");
			}
			| declaration_item
			{
				//printf("\nSeen single declaration;\n\n");

			}
			;

declaration_item : type ID '[' arraycontent ']'
			{
				//printf("\nSeen array declaration;\n\n");
				assign_array_info($1, $2, $4*4);
			}
			| type ID
			{
				//printf("\nSeen type declaration;\n\n");

				//cout << $1->name << endl;

				//$$ = assign_type($1,$2); // todo, give type to corresponding content in symbol table
			}
			;





arraycontent : INTLITERAL ',' arraycontent
			{
				//printf("\nSeen multi-dimention array declaration;\n\n");
				$$ = $1*$3;

			}
			| INTLITERAL
			{
				//printf("\nSeen 1D array declaration;\n\n");

				$$ = $1;
			}
			;


type		: INT
			| CHAR
			| LONG
			;


//************************ sBlock **************************//
sBlock : BEGIN_E declaration statement_list END_E
		{
			//printf("\nEnter sBlock\n\n");
		}
		;


//************************ statment list **************************//

statement_list  :  statement_list statement
                | statement
                ;

//************************ expression list **************************//           
Expression_list : Expression ',' Expression_list
		{

		}
		| Expression
		{

		}
		| /* empty */
		{

		}
		;

//************************ function call **************************//

statement : ID '(' Expression_list ')'
			{
				call_function($1->name, $3);
			}
			;

//************************ expression call **************************//

statement  : call_id '=' Expression
		{ 
			//printf("\nSeen EXP PASSING\n\n");

		    cout<< "r"<<$1->offset <<" = "<< $3 << ";"<<endl;

		}
  		;
//************************ Do Loop Statement **************************//
statement : do_loop_statement
			{
				//printf("\nSeen Do Loop;\n\n");
			}
			;

do_loop_statement : do_begin statement_list do_end
			{

			}
			;

do_begin : DO INTLITERAL ID '=' do_list
			{
					//printf("\nSeen Do BEGIN;\n\n");
			}
			;

do_list : Expression ',' Expression
		{

		}
		| Expression ',' Expression ',' Expression
		{

		}
		;

do_end : INTLITERAL CONTINUE
			{
				//printf("\nSeen Do End;\n\n");
			}
			;

//************************ IF Statement **************************//
statement : if_statement
			{

			}
			;

if_statement : IF '(' if_content ')' sBlock ELSE sBlock
			{

			}
			| IF '(' if_content ')' sBlock
			{

			}
			;

if_content : comparison AND if_content
			{

			}
			|comparison OR if_content
			{

			}
			| comparison
			{

			}
			;

comparison : Expression '.' GT '.' Expression
			{

			}
			|Expression '.' LT '.' Expression
			{

			}
			|Expression '.' GE '.' Expression
			{

			}
			|Expression '.' LE '.' Expression
			{

			}
			|Expression '.' EQ '.' Expression
			{

			}
			|Expression '.' NEQ '.' Expression
			{

			}
			;



//************************ Expression Calculation **************************//

Expression_list : Expression ',' Expression_list
		{

		}
		| Expression
		{

		}
		| /* empty */
		{

		}
		;

Expression : Expression bit_operation BitTerm
		{

		}
		| BitTerm
		{

		}
		;

BitTerm : BitTerm Shift_operation ShiftTerm
		{

		}
		| ShiftTerm
		{

		}
		;


ShiftTerm : ShiftTerm '+' term
		{
		    //printf("\nSeen ADD_OP\n\n"); 
		    char *rd = new_registrator();
		    cal_operation('+',$1,$3,rd);
		    $$ = rd;

		}
		| ShiftTerm '-' term
		{
		    //printf("\nSeen ADD_OP\n\n"); 

		   	char *rd = new_registrator();
		    //cout<< rd <<" = " << $1 << " - "<< $3<<";"<<endl;
		    cal_operation('-',$1,$3,rd);
		    $$ = rd;
		    
		}
	    | term
		{ 
		     //printf("Seen Term \n"); 

		    $$ = $1;
		}
   		;

term : 	term '*' factor 
		{
		     //printf("\nSeen MUL_OP \n\n"); 

		    char *rd = new_registrator();
		    cal_operation('*',$1,$3,rd);
		    $$ = rd;
		}
		| term '/' factor 
		{
		     //printf("\nSeen MUL_OP \n\n"); 

		    char *rd = new_registrator();
		    cal_operation('/',$1,$3,rd);
		    $$ = rd;
		}
	   	| factor
		{ 
		    // printf("Seen: FACTOR \n"); 

		    $$ = $1;
		}
   		;

factor 	: factor EXPO parentheses
		{
			// printf("Seen: EXPO_OP\n");

			char *rd = new_registrator(); 	
		    cout<< rd <<" = "<<Calc_exponential($1,$3)<<";"<<endl;
			$$ = rd;
		}
		| parentheses
		{
			// printf("\nSeen: PARENTHESES\n\n"); 

			$$ = $1;
		}
		;

parentheses : '(' Expression ')' 
		{ 
			$$ = $2;	
		}
		| call_id
		{
			// cout<<"Seen ID->"<<$1->name<<endl;

			$$ = id_distinction(); // todo ; return function name or create variable (in global data)
			$$ = start_expression_string($1);
		}
		| INTLITERAL
		{
			// cout<<"Seen INTLITERAL->"<<$1<<endl;
			$$ = get_number($1);
		}
		;

call_id : ID '[' Expression_list ']'
		{

		}
		| ID
		{
		
		}
		;

Shift_operation : LEFT_SHIFT
				{

				}
				| RIGHT_SHIFT
				{

				}
				;

bit_operation : '^'
			{

			}
			| '|'
			{

			}
			| '&'
			{

			}
			;

%%

void Generate_value_passing(Symbol* symbol,int value)
{
	/*  write a statment of the form 
		
		oril	#,r0,rd   
	    
	    where # is an integer constant constant  and
	    rd is the destination register.  r0 is always 
	      0 in this architecture.
	*/

	printf("oril %d,r0,r%d\n",value,symbol->offset);
}


void generate_exp(Symbol *symbol,const char *rhs)
{
	/*  write a statment of the form 
		
		ai	rs,#,rd   
	    
	    where # is an integer constant constant,  
	    rs is the source register and
	    rd is the destination register.
	*/

	printf("ai   %s,%d,r%d\n",rhs,const_value,symbol->offset);
}


char *start_expression_string(Symbol *symbol)
{
	char buffer[10];
	char *result;
	result = (char *)malloc(4);  /*  tacky, but should be big enuff  */

	strcpy(result,"r");
	sprintf(buffer,"%d",symbol->offset);
	strcat(result,buffer);

	return result;
}

char *new_registrator()
{
	char buffer[10];
	char *result;
	result = (char *)malloc(4);  /*  tacky, but should be big enuff  */

	strcpy(result,"r");
	sprintf(buffer,"%d",assign_next_register());
	strcat(result,buffer);
	return result;
}

int yyerror(const char *s)
{
        fflush(stdout);
        printf("Syntax Error %s\n",s);
        return 0;
}


char *Calc_exponential(const char *r1, const char *r2)
{
			int l = assign_next_lable();
			char *rt_i = new_registrator();
			cout<<rt_i<<"= 0;"<<endl;
			char *rx = new_registrator();
			cout<<rx<<"= 1;"<<endl;
			cout<<"L"<<l<<":"<<endl;
			cout<<rx<<" = "<<rx<<"*"<<r1<<";"<<endl;
			cout<<rt_i<<" = "<<rt_i<<" + 1;"<<endl;
			cout<<"if("<<r2<<">"<<rt_i<<") goto L"<<l<<";"<<endl;
			return rx;
}

int assign_next_lable()
{
	/* The compiler allocates each variable to a different machine
           register.  This routine just chooses the next register in
           the range r4 to r31.  Registers r0-r3 are reserved for other
           purposes  */

	static int lable;
	lable = lable + 1;
	return lable;
}


char *get_number(int num)
{
	char *buffer;
	buffer = new char[4];
	sprintf(buffer,"%d\0",num);
	return buffer;
}

bool is_number(const char *string)
{
	bool result = 0;
	for(int i=0;i<strlen(string);i++)
	{
		result = isdigit(string[i]);
		if(!result)
			return 0;
	}
	return 1;
}

void cal_operation(char oprator,const char *left, const char *right, const char *target)
{
	int temp;
	int a,b;
	if(is_number(left)&&is_number(right))
	{
		//cout<< "T1"<<endl;
		a = atoi(left);
		b = atoi(right);

		char *rd_1 = new_registrator();
		char *rd_2 = new_registrator();
		cout<< rd_1 <<" = " << a <<endl;
		cout<< rd_2 <<" = " << b <<endl;
		cout<< target << " = ";
		switch(oprator)
		{
			case '+':{
				cout<<rd_1<<"+"<<rd_2;
				break;
			}
			case '-':{
				cout<<rd_1<<"-"<<rd_2;
				break;
			}
			case '*':{
				cout<<rd_1<<"*"<<rd_2;
				break;
			}
			case '/':{
				cout<<rd_1<<"/"<<rd_2;
				break;
			}
			default: break;
		}
	}
	else
	{
		cout<< target << " = ";
		//cout<< "T2"<<endl;
		switch(oprator)
		{
			case '+':{
				cout<<left<<"+"<<right;
				break;
			}
			case '-':{
				cout<<left<<"-"<<right;
				break;
			}
			case '*':{
				cout<<left<<"*"<<right;
				break;
			}
			case '/':{
				cout<<left<<"/"<<right;
				break;
			}
			default: break;
		}
	}
	cout<<";"<<endl;
}


void function_call(Symbol *func, Symbol *para)
{
	if(strcmp(func->name,"output")==0)
	{
		cout<<"printInt(r"<<para->offset<<");"<<endl;
	}
	else
	if(strcmp(func->name,"printi")==0)
	{
		cout<<"printInt(r"<<para->offset<<");"<<endl;
	}
	else
	if(strcmp(func->name,"printLine")==0)
	{
		cout<<"printLine;"<<endl;
	}
}

void call_function(Symbol *func,char *para_list)
{
	// system functions
	if(strcmp(func->name,"printi")==0)
		{
			cout<<"printInt(r"<<para_list<<");"<<endl;
		}
	else
	if(strcmp(func->name,"printLine")==0)
		{
			cout<<"printline();"<<endl;
		}
	// custom functions
	else
	{
		cout<<func->name<<para_list<<";"<<endl;
	}
}

void assign_arraylocation(char *type, Symbol *id,int size)
{
	static int size_level;
	id->array_location = size_level;
	size_level += size;
}
