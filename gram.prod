%start Program_Initialization 

%%
Program_Initialization : Program
		{
			cout<<"int r0, r1, r2, r3, r4, r5, r6, r7;\nint *iptr1;\nchar *cptr1;\nchar *fp, *sp;\nchar int_variable[1024];\nchar char_variable[1024];\n";
			cout<< $1;
		}
		;

Program : declaration FuncList
		{

			$$ = string_connect($1,$2);
		}
		| FuncList
		{
			$$ = $1;
		}
		;

FuncList : Function FuncList
		{
			
			$$ = string_connect($1,$2);
		}
		| Function 
		{
			$$ = $1;
		}
		;


Function :  MAIN  '(' ')' ':' VOID sBlock
			{
				char return_string[]="main()\n";
				$$ = string_connect(return_string,$6);
			}
			| ID '(' Parameter_list ')'
			{
				
			}
			| ID '(' ')'
			{

			}

			| ID '(' Parameter_list ')' ':' type declaration sBlock
			{


			}
			;

Parameter_list : call_id ',' Parameter_list
			{

			}
			| call_id
			{

			}
			;

//************************ Variable Declaration **************************//

declaration : declaration_item ';' declaration
			{
				//printf("\nSeen sequent declaration;\n\n");
			}
			| declaration_item
			{
				//printf("\nSeen single declaration;\n\n");

			}
			;

declaration_item : type ID '[' arraycontent ']'
			{
				//printf("\nSeen array declaration;\n\n");
				assign_array_info($1, $2, $4);
				$$ = empty_label;
			}
			| type ID
			{
				//printf("\nSeen type declaration;\n\n");
				assign_variable_type($1,$2); // todo, give type to corresponding content in symbol table
				$$ = empty_label;
			}
			;





arraycontent : INTLITERAL ',' arraycontent
			{
				//printf("\nSeen multi-dimention array declaration;\n\n");
				$$ = $1*$3;

			}
			| INTLITERAL
			{
				//printf("\nSeen 1D array declaration;\n\n");

				$$ = $1;
			}
			;


type		: INT
			{
				char integer[]="int";
				$$ = integer;
			}
			| CHAR
			{
				char charactor[]="char";
				$$ = charactor;
			}
			| LONG
			{
				char long_integer[]="long";
				$$ = long_integer;
			}
			| BOOL
			{
				char bool_type[]="bool";
				$$ = bool_type;
			}
			;


//************************ sBlock **************************//
sBlock : BEGIN_E declaration statement_list END_E
		{
			
			char *return_string;
			char left_bracket[] = "\n{\n";
			char right_bracket[] = "\n}\n";
			return_string = string_connect(left_bracket,$2);
			return_string = string_connect(return_string,$3);
			return_string = string_connect(return_string,right_bracket);
			$$ = return_string;
		}
		| BEGIN_E statement_list END_E
		{
			//printf("\nEnter sBlock\n\n");
			
			char *return_string;
			char left_bracket[] = "\n{\n";
			char right_bracket[] = "\n}\n";

			return_string = string_connect(left_bracket,$2);
			//cout<<"TEST return string: "<<return_string<<endl;
			return_string = string_connect(return_string,right_bracket);
			$$ = return_string;
		}
		| BEGIN_E declaration END_E
		{
			char *return_string;
			char left_bracket[] = "\n{\n";
			char right_bracket[] = "\n}\n";
			return_string = string_connect(left_bracket,$2);
			return_string = string_connect(return_string,right_bracket);
			$$ = return_string;
		}
		| BEGIN_E END_E
		{
			char left_bracket[] = "{\n";
			char right_bracket[] = "}\n";
			$$ = string_connect(left_bracket,right_bracket);
		}
		;


//************************ statment list **************************//

statement_list  :  statement_list statement
				{
					$$ = string_connect($1,$2);
				}
                | statement
                {
                	$$ = $1;
                }
                ;

//************************  list **************************//           
Expression_list : Expression ',' Expression_list
		{
			char *return_string;
			char comma[] = ",";
			return_string = string_connect($1,comma);

			return_string = string_connect(return_string,$3);
			$$ = return_string;
		}
		| Expression
		{
			$$ = $1;
		}
		| /* empty */
		{

		}
		;

//************************ function call **************************//

statement : ID '(' Expression_list ')'
			{
				call_function($1, $3);
				char *return_string = copy_buffer();
				empty_string_buffer();
				$$ = return_string;
			}
			;

//************************ expression pass **************************//

statement  : call_id '=' Expression
		{ 
			//printf("\nSeen EXP PASSING\n\n");
		    //cout<< "r"<<$1->offset <<" = "<< $3 << ";"<<endl;
		    if($1->if_array == 1)
			{
				if(strcmp($1->type,"int")==0)
				{

					//cout<<data_shift<<"="<<array_target_location.top()<<"*"<<4<<";"<<endl;
					//cout<<total_shift<<"="<<data_shift<<"+"<<$1->array_location<<";"<<endl;
					char *data_shift = new_registrator();
					char *total_shift = new_registrator();

					//strcpy(read_array,"*(int_array+");
					//strcat(read_array, total_shift);
					sprintf(string_buffer + strlen(string_buffer),"%s = %s * 4;\n%s = %s + %d;\n",data_shift,array_target_location.top(),total_shift,data_shift,$1->array_location);
					sprintf(string_buffer + strlen(string_buffer),"*(int_array+%s)",total_shift);
					pop_array_target_location();
				}

			}
			else
			{
				sprintf(string_buffer + strlen(string_buffer),"r%d=%s;\n",$1->offset,$3);
			}
			char *return_string = copy_buffer();
			empty_string_buffer();

			$$ = return_string;
		}
  		;

//************************ Do Loop Statement **************************//
statement : do_loop_statement
			{
				//printf("\nSeen Do Loop;\n\n");
				$$ = $1;
			}
			;

do_loop_statement : do_begin statement_list do_end
			{
				char tmp[10000];
				sprintf(tmp,"%s%s%s%s",$1,$2,tmp_stack.top(),$3);
				tmp_stack.pop();
				$$ = string_copy(tmp);

			}
			;

do_begin : DO INTLITERAL ID '=' do_list
			{
				char tmp[1000];
				int index;
				index=do_stack.top();	
				do_stack.pop();
				//cout<<"L"<<index<<":"<<endl;
				sprintf(tmp,"%sL%d:\n",$5,index);
				$$ = string_copy(tmp);

			}
			;

do_list : Expression ',' Expression
		{
			char tmp[1000];
			char *increment = new_registrator();
			sprintf(tmp,"%s = 1;\n",increment);

			char tmp2[1000];
			sprintf(tmp2,"%s=%s+1;\nif(%s<%s) ",increment,increment,$1,$3);
			tmp_stack.push(tmp2);
			$$ = string_copy(tmp);
			
		}
		| Expression ',' Expression ',' Expression
		{
			char tmp2[1000];
			sprintf(tmp2,"%s=%s+%s;\nif(%s<%s)",$1,$1,$5,$1,$3);
			tmp_stack.push(tmp2);

			char empty[]="";
			$$ = empty;
		}
		;

do_end : INTLITERAL CONTINUE
			{
				char tmp[1000];
				int index = assign_next_lable();
				do_stack.push(index);

				sprintf(tmp,"goto L%s;\n",get_number(index));

				$$ = string_copy(tmp);
			}
			;

//************************ IF Statement **************************//
statement : if_statement
			{
				//cout<<$1<<endl;

				char *return_string;
				return_string = copy_buffer();
				empty_string_buffer();
				$$ = return_string;
			}
			;

if_statement : IF '(' if_content ')' sBlock ELSE sBlock
			{
				int top,med,bot;
				char* tmp;
				top=if_stack.top();
				if_stack.pop();
				med=if_stack.top();
				if_stack.pop();
				bot=if_stack.top();
				if_stack.pop();
				int length=strlen(tmp_stack.top());
				tmp=new char[length+1];
				strcpy(tmp,tmp_stack.top());
				tmp_stack.pop();
				/*cout<<"if("<<$3<<") goto L"<<med<<endl;
				cout<<"L"<<top<<":"<<endl;
				cout<<$7<<endl;
				cout<<"goto L"<<bot<<endl;
				cout<<"L"<<med<<":"<<endl;
				cout<<$5<<endl;
				cout<<"L"<<bot<<":"<<endl;*/
				sprintf(string_buffer + strlen(string_buffer),"if(%s) goto L%d\nL%d:\n%s\ngoto L%d\nL%d:%s\nL%d:\n",$3,med,top,$7,bot,med,$5,bot);
			}
			| IF '(' if_content ')' sBlock
			{
				int top,med,bot;
				char* tmp;
				char* upload;
				cout<<"im $3"<<$3<<endl;
				top=if_stack.top();
				if_stack.pop();
				med=if_stack.top();
				if_stack.pop();
				bot=if_stack.top();
				if_stack.pop();
				int length=strlen(tmp_stack.top());
				tmp=new char[length+1];
				strcpy(tmp,tmp_stack.top());
				tmp_stack.pop();
				length=strlen($3);
				upload=new char[length+1];
				strcpy(upload,$3);
				/*cout<<"if("<<$3<<") goto L"<<med<<endl;
				cout<<"L"<<top<<":"<<endl;
				cout<<"goto L"<<bot<<endl;
				cout<<"L"<<med<<":"<<endl;
				cout<<$5<<endl;
				cout<<"L"<<bot<<":"<<endl;*/
				sprintf(string_buffer+strlen(string_buffer),"%s",upload);
				sprintf(string_buffer + strlen(string_buffer),"if(%s) goto L%d\nL%d:\ngoto L%d\nL%d:%s\nL%d:\n",tmp,med,top,bot,med,$5,bot);
				
				
			}
			;

if_content : comparison AND if_content
			{
				int top,med,bot;
				char* tmp;
				char* upload;
				top=if_stack.top();
				if_stack.pop();
				med=if_stack.top();
				if_stack.pop();
				bot=if_stack.top();
				if_stack.pop();
				tmp=string_copy(tmp_stack.top());
				tmp_stack.pop();
				/*cout<<"  if("<<revise($3)<<") goto L"<<top<<endl;*/
				int length=strlen(tmp);
				length+=strlen($3);
				upload=new char[length+1];
				strcpy(upload,$3); 
				sprintf(upload+strlen(upload),"if(%s) goto L%d\n",revise(tmp),top);
				
				if_stack.push(bot);
				if_stack.push(med);
				if_stack.push(top);	
				cout<<"im upload:"<<upload<<endl; 
				tmp_stack.push($1);	
				$$=upload; 
				 
			}
			|comparison OR if_content        
			{
				int top,med,bot;
				char* tmp;
				char* upload;
				top=if_stack.top();
				if_stack.pop();
				med=if_stack.top();
				if_stack.pop();
				bot=if_stack.top();
				if_stack.pop();
				int length=strlen(tmp_stack.top());
				tmp=new char[length+1];
				strcpy(tmp,tmp_stack.top());
				tmp_stack.pop();
				/*cout<<"  if("<<$3<<") goto L"<<med<<endl;*/
				length+=strlen($3);
				upload=new char[length+1];
				strcpy(upload,$3); 
				sprintf(upload,"if(%s) goto L%d\n",tmp,med);
				if_stack.push(bot);
				if_stack.push(med);
				if_stack.push(top);
				cout<<upload<<endl;	
				$$=upload;
				tmp_stack.push($1);				
			}
			| comparison
			{
				tmp_stack.push($1);
				if_stack.push(assign_next_lable());
				if_stack.push(assign_next_lable());
				if_stack.push(assign_next_lable());
				char empty[]="";
				$$=empty;
			}
			;

comparison : Expression '.' GT '.' Expression
			{
				/*char tmp[10000];
				strcpy(tmp,$1);
				strcat(tmp,">");
				strcat(tmp,$5);
				$$=tmp;*/

				char gt[]=">";
				char *return_string;
				return_string = string_connect($1,gt);
				return_string = string_connect(return_string,$5);
				$$ = return_string;
			}
			|Expression '.' LT '.' Expression
			{
				/*char tmp[10000];
				strcpy(tmp,$1);
				strcat(tmp,"<");
				strcat(tmp,$5);
				$$=tmp;*/

				char lt[]="<";
				char *return_string;
				return_string = string_connect($1,lt);
				return_string = string_connect(return_string,$5);
				$$ = return_string;
			}
			|Expression '.' GE '.' Expression
			{
				/*char tmp[10000];
				strcpy(tmp,$1);
				strcat(tmp,">=");
				strcat(tmp,$5);
				$$=tmp;*/

				char ge[]=">=";
				char *return_string;
				return_string = string_connect($1,ge);
				return_string = string_connect(return_string,$5);
				$$ = return_string;
			}
			|Expression '.' LE '.' Expression
			{
				/*char tmp[10000];
				strcpy(tmp,$1);
				strcat(tmp,"<=");
				strcat(tmp,$5);
				$$=tmp;*/

				char le[]=">=";
				char *return_string;
				return_string = string_connect($1,le);
				return_string = string_connect(return_string,$5);
				$$ = return_string;
			}
			|Expression '.' EQ '.' Expression
			{
				/*char tmp[10000];
				strcpy(tmp,$1);
				strcat(tmp,"==");
				strcat(tmp,$5);
				$$=tmp;*/

				char eq[]="==";
				char *return_string;
				return_string = string_connect($1,eq);
				return_string = string_connect(return_string,$5);
				$$ = return_string;
			}
			|Expression '.' NEQ '.' Expression
			{
				/*char tmp[10000];
				strcpy(tmp,$1);
				strcat(tmp,"!=");
				strcat(tmp,$5);
				$$=tmp;*/

				char eq[]="==";
				char *return_string;
				return_string = string_connect($1,eq);
				return_string = string_connect(return_string,$5);
				$$ = return_string;

			}
			;



//************************ Expression Calculation **************************//


Expression : Expression bit_operation BitTerm
		{

		}
		| BitTerm
		{

		}
		;

BitTerm : BitTerm Shift_operation ShiftTerm
		{

		}
		| ShiftTerm
		{

		}
		;


ShiftTerm : ShiftTerm '+' term
		{
		    //printf("\nSeen ADD_OP\n\n"); 
		    char *rd = new_registrator();
		    cal_operation('+',$1,$3,rd);
		    $$ = rd;

		}
		| ShiftTerm '-' term
		{
		    //printf("\nSeen ADD_OP\n\n"); 

		   	char *rd = new_registrator();
		    //cout<< rd <<" = " << $1 << " - "<< $3<<";"<<endl;
		    cal_operation('-',$1,$3,rd);
		    $$ = rd;
		    
		}
	    | term
		{ 
		     //printf("Seen Term \n"); 

		    $$ = $1;
		}
   		;

term : 	term '*' factor 
		{
		     //printf("\nSeen MUL_OP \n\n"); 

		    char *rd = new_registrator();
		    cal_operation('*',$1,$3,rd);
		    $$ = rd;
		}
		| term '/' factor 
		{
		     //printf("\nSeen MUL_OP \n\n"); 

		    char *rd = new_registrator();
		    cal_operation('/',$1,$3,rd);
		    $$ = rd;
		}
	   	| factor
		{ 
		    // printf("Seen: FACTOR \n"); 

		    $$ = $1;
		}
   		;

factor 	: factor EXPO parentheses
		{
			// printf("Seen: EXPO_OP\n");

			char *rd = new_registrator(); 	
		    cout<< rd <<" = "<<Calc_exponential($1,$3)<<";"<<endl;
			$$ = rd;
		}
		| parentheses
		{
			// printf("\nSeen: PARENTHESES\n\n"); 

			$$ = $1;
		}
		;

parentheses : '(' Expression ')' 
		{ 
			$$ = $2;	
		}
		| call_id
		{
			// cout<<"Seen ID->"<<$1->name<<endl;
			if($1->if_array == 1)
			{
				if(strcmp($1->type,"int")==0)
				{

					//cout<<data_shift<<"="<<array_target_location.top()<<"*"<<4<<";"<<endl;
					//cout<<total_shift<<"="<<data_shift<<"+"<<$1->array_location<<";"<<endl;
					char *data_shift = new_registrator();
					char *total_shift = new_registrator();

					//strcpy(read_array,"*(int_array+");
					//strcat(read_array, total_shift);
					sprintf(string_buffer + strlen(string_buffer),"%s = %s * 4;\n%s = %s + %d;\n",data_shift,array_target_location.top(),total_shift,data_shift,$1->array_location);
					sprintf(string_buffer + strlen(string_buffer),"*(int_array+%s)",total_shift);
					pop_array_target_location();
				}

			}
			else
			{

			$$ = start_expression_string($1);

			}
		}
		| INTLITERAL
		{
			// cout<<"Seen INTLITERAL->"<<$1<<endl;
			$$ = get_number($1);
		}
		;

call_id : ID '[' Expression_list ']'
		{
			push_array_target_location($3);
			$$ = $1;
		}
		| ID
		{
			$$ = $1;
		}
		;

Shift_operation : LEFT_SHIFT
				{

				}
				| RIGHT_SHIFT
				{

				}
				;

bit_operation : '^'
			{

			}
			| '|'
			{

			}
			| '&'
			{

			}
			;

%%

void Generate_value_passing(Symbol* symbol,int value)
{
	/*  write a statment of the form 
		
		oril	#,r0,rd   
	    
	    where # is an integer constant constant  and
	    rd is the destination register.  r0 is always 
	      0 in this architecture.
	*/

	printf("oril %d,r0,r%d\n",value,symbol->offset);
}


void generate_exp(Symbol *symbol,const char *rhs)
{
	/*  write a statment of the form 
		
		ai	rs,#,rd   
	    
	    where # is an integer constant constant,  
	    rs is the source register and
	    rd is the destination register.
	*/

	printf("ai   %s,%d,r%d\n",rhs,const_value,symbol->offset);
}


char *start_expression_string(Symbol *symbol)
{
	char buffer[10];
	char *result;
	result = (char *)malloc(4);  /*  tacky, but should be big enuff  */

	strcpy(result,"r");
	sprintf(buffer,"%d",symbol->offset);
	strcat(result,buffer);

	return result;
}

char *new_registrator()
{
	char buffer[10];
	char *result;
	result = (char *)malloc(4);  /*  tacky, but should be big enuff  */

	strcpy(result,"r");
	sprintf(buffer,"%d",assign_next_register());
	strcat(result,buffer);
	return result;
}

int yyerror(const char *s)
{
        fflush(stdout);
        printf("Syntax Error %s\n",s);
        return 0;
}


char *Calc_exponential(const char *r1, const char *r2)
{
			int l = assign_next_lable();
			char *rt_i = new_registrator();
			char *rx = new_registrator();

			/*
			cout<<rt_i<<"= 0;"<<endl;
			cout<<rx<<"= 1;"<<endl;
			cout<<"L"<<l<<":"<<endl;
			cout<<rx<<" = "<<rx<<"*"<<r1<<";"<<endl;
			cout<<rt_i<<" = "<<rt_i<<" + 1;"<<endl;
			cout<<"if("<<r2<<">"<<rt_i<<") goto L"<<l<<";"<<endl;*/
			sprintf(string_buffer + strlen(string_buffer),"%s= 0;\n%s= 1;\nL%d:\n%s = %s*%s;\n%s = %s + 1;\nif(%s>%s) goto L%d;\n",rt_i,rx,l,rx,rx,r1,rt_i,rt_i,r2,rt_i,l);

			return rx;
}

int assign_next_lable()
{
	/* The compiler allocates each variable to a different machine
           register.  This routine just chooses the next register in
           the range r4 to r31.  Registers r0-r3 are reserved for other
           purposes  */

	static int lable;
	lable = lable + 1;
	return lable;
}


char *get_number(int num)
{
	char *buffer;
	buffer = new char[4];
	sprintf(buffer,"%d\0",num);
	return buffer;
}

bool is_number(const char *string)
{
	bool result = 0;
	for(int i=0;i<strlen(string);i++)
	{
		result = isdigit(string[i]);
		if(!result)
			return 0;
	}
	return 1;
}

char* cal_operation(char oprator,const char *left, const char *right, const char *target)
{
	int temp;
	int a,b;
	if(is_number(left)&&is_number(right))
	{
		//cout<< "T1"<<endl;
		a = atoi(left);
		b = atoi(right);

		char *rd_1 = new_registrator();
		char *rd_2 = new_registrator();
		/*cout<< rd_1 <<" = " << a <<endl;
		cout<< rd_2 <<" = " << b <<endl;
		cout<< target << " = ";*/
		sprintf(string_buffer + strlen(string_buffer),"%s = %d\n%s = %d\n%s = ",rd_1,a,rd_2,b,target);

		switch(oprator)
		{
			case '+':{
				// cout<<rd_1<<"+"<<rd_2;
				sprintf(string_buffer + strlen(string_buffer),"%s+%s",rd_1,rd_2);
				break;
			}
			case '-':{
				//cout<<rd_1<<"-"<<rd_2;
				sprintf(string_buffer + strlen(string_buffer),"%s-%s",rd_1,rd_2);
				break;
			}
			case '*':{
				//cout<<rd_1<<"*"<<rd_2;
				sprintf(string_buffer + strlen(string_buffer),"%s*%s",rd_1,rd_2);
				break;
			}
			case '/':{
				//cout<<rd_1<<"/"<<rd_2;
				sprintf(string_buffer + strlen(string_buffer),"%s/%s",rd_1,rd_2);
				break;
			}
			default: break;
		}
	}
	else
	{
		//cout<< target << " = ";
		sprintf(string_buffer + strlen(string_buffer),"%s = ",target);

		//cout<< "T2"<<endl;
		switch(oprator)
		{
			case '+':{
				//cout<<left<<"+"<<right;
				sprintf(string_buffer + strlen(string_buffer),"%s+%s",left,right);
				break;
			}
			case '-':{
				//cout<<left<<"-"<<right;
				sprintf(string_buffer + strlen(string_buffer),"%s-%s",left,right);
				break;
			}
			case '*':{
				//cout<<left<<"*"<<right;
				sprintf(string_buffer + strlen(string_buffer),"%s*%s",left,right);
				break;
			}
			case '/':{
				//cout<<left<<"/"<<right;
				sprintf(string_buffer + strlen(string_buffer),"%s/%s",left,right);
				break;
			}
			default: break;
		}
	}
	//cout<<";"<<endl;
	sprintf(string_buffer + strlen(string_buffer),";");
}

char* call_function(Symbol *func,char *para_list)
{
	// system functions
	if(strcmp(func->name,"printi")==0)
		{
			//cout<<"printInt(r"<<para_list<<");"<<endl;
			sprintf(string_buffer + strlen(string_buffer),"printInt(%s);\n",para_list);
		}
	else
	if(strcmp(func->name,"printLine")==0)
		{
			//cout<<"printline();"<<endl;
			sprintf(string_buffer + strlen(string_buffer),"printline();\n");
		}
	// custom functions
	else
	{
		//cout<<func->name<<para_list<<";"<<endl;
		sprintf(string_buffer + strlen(string_buffer),"%s(%s);\n",func->name,para_list);
	}
}

void assign_variable_type(char *type,Symbol *id)
{
	id->type = type;
}

char* string_connect(char *a, char *b)
{
	/*cout<<"TEST a: "<<a<<endl;
	cout<<"TEST b: "<<b<<endl;
	cout<<"TEST l1: "<<strlen(a)<<endl;
	cout<<"TEST l2: "<<strlen(b)<<endl;*/
	int newlen = strlen(a) + strlen(b);
	/*cout<<"TEST newlen: "<<newlen<<endl;*/
	char *r =  new char[newlen+1];

/*	strcpy(r, a);
	cout<<"TEST copy: "<<r<<endl;
	strcat(r, b);
	cout<<"TEST cat: "<<r<<endl;*/

	sprintf(r,"%s%s",a,b);
	/*cout<<"TEST output length: "<<strlen(r)<<endl;
	cout<<"TEST output: "<<r<<endl;*/
	return r;
}

char* copy_buffer()
{
	size_t newlen = strlen(string_buffer);
	char *r = new char[newlen+1];
	strcpy(r, string_buffer);
	return r;
}

void assign_array_info(char *type, Symbol *id,int size)
{
	static int int_size_level;
	static int char_size_level;
	id->type = type;
	id->if_array = 1;
	if(strcmp(type,"int")==0)
	{
		id->array_location = int_size_level;
		int_size_level += size;
	}
}

void push_array_target_location(char *location )
{
	array_target_location.push(location);
}

void pop_array_target_location()
{
	array_target_location.pop();
}

void empty_string_buffer()
{
	int i;
	for(i=0;i<1000;i++)
	{
		string_buffer[i] = '\0';
	}
}

char *revise(char* str)
{	
	if(ReplaceStr(str,">","<="))
		return str;
	else if(ReplaceStr(str,"<",">="))
		return str;
	else if(ReplaceStr(str,">=","<"))
		return str;
	else if(ReplaceStr(str,"<=",">"))
		return str;
	else if(ReplaceStr(str,"==","!="))
		return str;
	else if(ReplaceStr(str,"!=","=="))
		return str;
	else
		return str;
}

int ReplaceStr(char *sSrc, const char *sMatchStr, const char *sReplaceStr)
{
        int  StringLen;
        char caNewString[50];
 
        char *FindPos = strstr(sSrc, sMatchStr);
        if( (!FindPos) || (!sMatchStr) )
                return -1;
 
        if( FindPos )
        {
                memset(caNewString, 0, sizeof(caNewString));
                StringLen = FindPos - sSrc;
                strncpy(caNewString, sSrc, StringLen);
                strcat(caNewString, sReplaceStr);
                strcat(caNewString, FindPos + strlen(sMatchStr));
                strcpy(sSrc, caNewString);
 
                FindPos = strstr(sSrc, sMatchStr);
        }
 	return 1;
}
char *string_copy(char *str)
{
	int len=strlen(str);
	char* string;
	string = new char[len+1];
	strcpy(string,str);
	return string;
}

